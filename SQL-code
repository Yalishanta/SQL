#Cоздание таблиц
mysql> CREATE DATABASE fine_data;
mysql> USE fine_data;
mysql> CREATE TABLE fine
    -> (fine_id serial PRIMARY KEY,
    -> name varchar(30),
    -> number_plate varchar(6),
    -> violation varchar(50),
    -> sum_fine decimal(8, 2),
    -> date_violation date,
    -> date_payment date);
mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
    -> VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14 ', NULL),
    ->        ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
    ->        ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL),
    ->        ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
    ->        ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
    ->        ('Яковлев Г.Р.', 'Т330ТТ', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
    ->        ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', NULL, '2020-01-12', NULL),
    ->        ('Колесов С.П.', 'К892АХ', 'Превышение скорости(от 20 до 40)', NULL, '2020-02-01', NULL);
mysql> CREATE TABLE traffic_violation
    ->     (
    ->         violation_id serial
    ->             PRIMARY KEY,
    ->         violation varchar(50),
    ->         sum_fine decimal(8, 2)
    ->     );
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO traffic_violation (violation, sum_fine)
    -> VALUES ('Превышение скорости(от 20 до 40)', 500),
    ->        ('Превышение скорости(от 40 до 60)', 1000),
    ->        ('Проезд на запрещающий сигнал', 1000);
mysql> FROM fine AS f, traffic_violation AS tv;
#Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. 
#При этом суммы заносить только в пустые поля столбца  sum_fine.
mysql> UPDATE fine f,
    ->     traffic_violation tv
    -> SET f.sum_fine = tv.sum_fine
    -> WHERE f.violation = tv.violation
    ->     AND f.sum_fine IS NULL;
#Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
SELECT name, number_plate, violation
    -> FROM fine
    -> GROUP by name, number_plate, violation
    -> HAVING count(violation) >= 2
    -> ORDER by name, number_plate, violation;
#Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.
CREATE TABLE back_payment
    ->     (SELECT name, number_plate, violation, sum_fine, date_violation
    ->      FROM fine
    ->      WHERE date_payment IS NULL);
mysql> SELECT * FROM back_payment;
#2.4 
# 1 Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.
mysql>SELECT buy_book.buy_id, title, price, buy_book.amount
    -> FROM 
		->		 client INNER JOIN buy ON client.client_id = buy.client_id
    ->     INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id INNER JOIN book ON buy_book.book_id=book.book_id
    ->     WHERE name_client LIKE 'Баранов Павел'
    ->     ORDER BY buy_book.buy_id, title;

#Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.
mysql> SELECT name_genre, SUM(buy_book.amount) as Количество
    -> FROM genre JOIN book USING(genre_id)
    ->     JOIN buy_book USING(book_id)
    -> GROUP BY name_genre
    -> limit 1;
#Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за текущий и предыдущий год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.
#Информация о продажах предыдущего года хранится в архивной таблице buy_archive, которая создается в конце года на основе информации из таблиц базы данных
mysql> CREATE TABLE buy_archive
    -> (
    ->     buy_archive_id INT PRIMARY KEY AUTO_INCREMENT,
    ->     buy_id         INT,
    ->     client_id      INT,
    ->     book_id        INT,
    ->     date_payment   DATE,
    ->     price          DECIMAL(8, 2),
    ->     amount         INT
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql>
mysql> INSERT INTO buy_archive (buy_id, client_id, book_id, date_payment, amount, price)
    -> VALUES (2, 1, 1, '2019-02-21', 2, 670.60),
    ->        (2, 1, 3, '2019-02-21', 1, 450.90),
    ->        (1, 2, 2, '2019-02-10', 2, 520.30),
    ->        (1, 2, 4, '2019-02-10', 3, 780.90),
    ->        (1, 2, 3, '2019-02-10', 1, 450.90),
    ->        (3, 4, 4, '2019-03-05', 4, 780.90),
    ->        (3, 4, 5, '2019-03-05', 2, 480.90),
    ->        (4, 1, 6, '2019-03-12', 1, 650.00),
    ->        (5, 2, 1, '2019-03-18', 2, 670.60),
    ->        (5, 2, 4, '2019-03-18', 1, 780.90);
mysql> WITH Title_sales AS (
    -> SELECT title, buy_book.amount, price
    -> FROM book
    ->     INNER JOIN buy_book USING(book_id)
    ->     INNER JOIN buy USING(buy_id)
    ->     INNER JOIN buy_step USING(buy_id)
    ->     INNER JOIN step USING(step_id)
    -> WHERE  date_step_end IS NOT Null and name_step = "Оплата"
    ->
    -> UNION ALL
    ->
    -> SELECT title, buy_archive.amount, buy_archive.price
    ->     FROM buy_archive
    ->     INNER JOIN book USING(book_id)
    -> )
    -> SELECT title, SUM(amount) AS Количество, SUM(amount*price) AS Сумма
    -> FROM Title_sales
    -> GROUP BY title
    -> ORDER BY Сумма DESC;
